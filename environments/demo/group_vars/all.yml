# hypothesis role vars
h_application_name: h
h_user: hdemo
h_user_group: www-data
h_directory: "/var/www/{{ h_application_name }}"
h_conf_directory: "{{ h_directory }}/conf"
h_bin_directory: "{{ h_directory }}/bin"
h_log_directory: "/var/log/{{ h_application_name }}"
h_conf_template: conf/app.ini.j2
h_error_log: "{{ h_log_directory }}/error.log"
h_access_log: "{{ h_log_directory }}/access.log"
h_worker_log: "{{ h_log_directory }}/celery.log"
h_celery_beat_log: "{{ h_log_directory }}/celery-beat-log.log"
h_app_url: hdemo.openstax.org

h_virtualenv_base: "{{ h_directory }}/.env"
h_virtualenv_python: /usr/bin/python
h_virtualenv_requirements_path: "{{ h_directory }}/requirements-dev.in"

h_authority: openstax.org
h_client_id: "{{ wsgi.hypothesis_client_id }}"
h_client_secret: "{{ wsgi.hypothesis_client_secret }}"
h_secret_key: "{{ wsgi.hypothesis_secret_key }}"

h_db_user: "{{ postgres.users[0].name }}"
h_db_password: "{{ postgres.users[0].password }}"
h_db_name: "{{ postgres.databases[0].name }}"
h_db_host: localhost
h_db_url: "postgresql://{{ h_db_user }}:{{ h_db_password }}@{{ h_db_host }}/{{ h_db_name }}"

# vars used specifically for box exporter which exports data to box for researchers
h_box_exporter_enabled: true
h_box_exporter_home: /opt/box_exporter
h_box_exporter_query_file: annotation-query.sql
h_box_exporter_script_file: annotation-export.sh
h_box_client_id: "{{ box.client_id }}"
h_box_client_secret: "{{ box.client_secret }}"
h_box_folder_id: "{{ box.folder_id }}"
h_box_rsa_private_key_pass: "{{ box.rsa_private_key_pass }}"
h_box_rsa_private_key_path: "{{ box.rsa_private_key_path }}"
h_box_rsa_private_key_content: "{{ box.rsa_private_key_content }}"
h_box_jwt_key_id: "{{ box.jwt_key_id }}"
h_box_enterprise_id: "{{ box.enterprise_id }}"

# h application environment variables
h_env: &h_env
  APP_URL: "{{ h_app_url }}"
  BROKER_URL: amqp://guest:guest@localhost:5672//
  SECRET_KEY: "{{ h_secret_key }}"
  DATABASE_URL: "{{ h_db_url }}"
  ELASTICSEARCH_HOST: http://localhost:9200
  ELASTICSEARCH_INDEX: hypothesis
  AUTHORITY: "{{ h_authority }}"
  CLIENT_ID: "{{ h_client_id }}"
  CLIENT_SECRET: "{{ h_client_secret }}"
  PYTHONPATH: "{{ h_virtualenv_base }}/bin"
  PATH: "{{ h_virtualenv_base }}/bin:usr/local/bin:/usr/bin:/bin"

# Celery env vars
celery_env: &celery_env
  CELERYD_PID_FILE: "{{ h_directory }}/celery.pid"
  CELERYD_LOG_FILE: "{{ h_log_directory }}/celery.log"
  CELERYD_LOG_LEVEL: INFO
  CELERY_BEAT_LOG_FILE: "{{ h_log_directory }}/celery-beat.log"

h_env_files:
  hypothesis:
    template: etc/default/env.j2
    dest: /etc/default/h
    env_vars:
      <<: *h_env
      <<: *celery_env
      APP_RUN_OPTS: |
        "--name h \
          --paste {{ h_conf_directory }}/app.ini \
          --capture-output \
          --error-logfile {{ h_error_log }} \
          --access-logfile {{ h_access_log }} \
          --bind unix:/tmp/h.sock"

#  set permissions on the tmp files
h_tmpfilesd:
 h_socket:
   template: etc/tmpfiles.d/tmpfile.conf.j2
   dest: "/etc/tmpfiles.d/{{ h_application_name }}.conf"
   tmpfile: "d /tmp/{{ h_application_name }}.sock 0755 {{ h_user }} {{ h_user_group }} -"

# Add service files for the h application
h_services:
  h_service:
    application_name: "{{ h_application_name }}"
    template: lib/systemd/system/application.service.j2
    description: "{{ h_application_name }} gunicorn service"
    dest: "/lib/systemd/system/{{ h_application_name}}.service"
    requires: h.socket
    state: present
    params:
      EnvironmentFile: "-/etc/default/{{ h_application_name }}"
      PIDFile: "/run/gunicorn/{{ h_application_name }}-pid"
      User: "{{ h_user }}"
      Group: "{{ h_user_group }}"
      RuntimeDirectory: gunicorn
      WorkingDirectory: "{{ h_directory }}"
      ExecStart: "{{ h_virtualenv_base }}/bin/gunicorn $APP_RUN_OPTS"
      ExecReload: "/bin/kill -s HUP $MAINPID"
      ExecStop: "/bin/kill -s TERM $MAINPID"
      PrivateTmp: true
  h_socket:
    application_name: "{{ h_application_name }}.socket"
    template: lib/systemd/system/application.socket.j2
    description: "{{ h_application_name }} gunicorn socket"
    dest: "/lib/systemd/system/{{ h_application_name}}.socket"
    state: present
    params:
      ListenStream: "/tmp/{{ h_application_name }}.sock"
  h_worker:
    application_name: "{{ h_application_name }}-worker"
    template: lib/systemd/system/application.service.j2
    description: "{{ h_application_name }} gunicorn service"
    dest: "/lib/systemd/system/{{ h_application_name}}-worker.service"
    state: present
    params:
      EnvironmentFile: "-/etc/default/{{ h_application_name }}"
      PIDFile: "{{ h_directory }}/celery.pid"
      User: "{{ h_user }}"
      Group: "{{ h_user_group }}"
      RuntimeDirectory: celery
      WorkingDirectory: "{{ h_directory }}"
      ExecStart: "{{ h_bin_directory }}/hypothesis celery worker"
      ExecReload: "/bin/kill -s HUP $MAINPID"
      ExecStop: "/bin/kill -s TERM $MAINPID"
  h_beat:
    application_name: "{{ h_application_name }}-beat"
    template: lib/systemd/system/application.service.j2
    description: "{{ h_application_name }} gunicorn service"
    dest: "/lib/systemd/system/{{ h_application_name}}-beat.service"
    state: present
    params:
      EnvironmentFile: "-/etc/default/{{ h_application_name }}"
      PIDFile: "{{ h_directory }}/celeryscheduler.pid"
      User: "{{ h_user }}"
      Group: "{{ h_user_group }}"
      RuntimeDirectory: celery
      WorkingDirectory: "{{ h_directory }}"
      ExecStart: "{{ h_bin_directory }}/hypothesis celery beat"
      ExecReload: "/bin/kill -s HUP $MAINPID"
      ExecStop: "/bin/kill -s TERM $MAINPID"
      PrivateTmp: true

# pip role vars
pip_package: python3-pip

# nginx
nginx_remove_default_vhost: true
nginx_vhosts:
  - listen: "443 ssl"
    server_name: "{{ h_app_url }}"
    server_name_redirect: "{{ h_app_url }}"
    root: "{{ h_directory }}"
    state: "present"
    filename: "{{ h_application_name }}.conf"
    upstreams: |
      upstream web { server unix:/tmp/h.sock fail_timeout=0; }
      upstream websocket { server unix:/tmp/h-websocket.sock fail_timeout=0; }
    extra_parameters: |
      ssl_certificate /etc/ssl/certs/{{ ssl_cert_file_name }}.crt;
      ssl_certificate_key /etc/ssl/private/{{ ssl_s3_key_name }};
      ssl_prefer_server_ciphers on;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      ssl_ciphers
          'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
      client_max_body_size 4G;
      large_client_header_buffers 4 32k;
      keepalive_timeout 5;
      location /ws {
        proxy_pass http://websocket;
        proxy_http_version 1.1;
        proxy_redirect off;
        proxy_buffering off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Server $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

      location /api {
        proxy_pass http://web;
        proxy_http_version 1.1;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Server $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Request-Start "t=${msec}";
        }

# postgresql
pg_version: 9.6
pg_is_master_server: true
pg_host: "{{ postgres.host }}"
pg_extra_packages:
  - python3-psycopg2

pg_databases:
  - name: "{{ postgres.databases[0].name }}"

pg_users:
  - name: "{{ postgres.users[0].name }}"
    password:  "{{ postgres.users[0].password }}"
    db: "{{ postgres.users[0].db }}"

# npm
nodejs_npm_global_packages: ['gulp-cli']
nodejs_install_npm_user: "{{ h_user }}"
nodejs_package_json_path: "{{ h_directory }}"

# ssl
ssl_www_user: www-data
ssl_s3_bucket: openstax-config
ssl_s3_primary_cert: ssl/openstax.org/openstax.org.crt
ssl_s3_intermediate_cert: ssl/openstax.org/gd_bundle-g2-g1.crt
ssl_s3_private_key:  ssl/openstax.org/openstax.org.key
ssl_s3_key_name: openstax.pem
ssl_s3_aws_secret_access_key: "{{ aws.secret_access_key }}"
ssl_s3_aws_access_key_id: "{{ aws.access_key_id }}"
ssl_cert_file_name: openstax
ssl_copy: ~

# papertrail
papertrail_url: "{{ papertrail.url }}"
papertrail_ssl_dest_cert_dir: "{{ ssl_dest_cert_dir }}"
papertrail_watch_files:
  - path: "{{ h_access_log }}"
    unique_name: "{{ h_application_name }}_access"
  - path: "{{ h_error_log }}"
    unique_name: "{{ h_application_name }}_error"
  - path: "{{ h_worker_log }}"
    unique_name: "{{ h_application_name }}_celery_worker"
  - path: "{{ h_celery_beat_log }}"
    unique_name: "{{ h_application_name }}_celery_beat"
  - path: "/var/log/nginx/error.log"
    unique_name: "{{ h_application_name }}_nginx_error"
  - path: "/var/log/nginx/access.log"
    unique_name: "{{ h_application_name }}_nginx_access"
